-- MySQL Script generated by MySQL Workbench
-- Fri Oct 30 19:44:03 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mydb` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`Альбом`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Альбом` (
  `ID Альбома` INT NOT NULL AUTO_INCREMENT,
  `Название` VARCHAR(255) NOT NULL,
  `Жанр` VARCHAR(255) NOT NULL,
  `Год выхода` INT NOT NULL,
  `Место в топе альбомов` INT NULL,
  PRIMARY KEY (`ID Альбома`));


-- -----------------------------------------------------
-- Table `mydb`.`Альбом-Песня`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Альбом-Песня` (
  `ID Альбома` INT NOT NULL,
  `ID Песни` INT NOT NULL,
  INDEX `Альбом-Песня_fk1` (`ID Песни` ASC) VISIBLE,
  PRIMARY KEY (`ID Альбома`, `ID Песни`),
  CONSTRAINT `Альбом-Песни_fk0`
    FOREIGN KEY (`ID Альбома`)
    REFERENCES `mydb`.`Альбом` (`ID Альбома`),
  CONSTRAINT `Альбом-Песни_fk1`
    FOREIGN KEY (`ID Песни`)
    REFERENCES `mydb`.`Песня` (`ID Песни`));


-- -----------------------------------------------------
-- Table `mydb`.`Исполнитель`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Исполнитель` (
  `ID Исполнителя` INT NOT NULL AUTO_INCREMENT,
  `Название/псевдоним` VARCHAR(255) NOT NULL,
  `Ссылка на исполнителя` VARCHAR(255) NOT NULL,
  `Количество подписчиков на Spotify` INT NOT NULL,
  `Количество прослушиваний за месяц на Spotify` INT NOT NULL,
  `Место в топе исполнителей` INT NULL,
  PRIMARY KEY (`ID Исполнителя`));


-- -----------------------------------------------------
-- Table `mydb`.`Исполнитель-Музыкант`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Исполнитель-Музыкант` (
  `ID Исполнителя` INT NOT NULL,
  `ID Музыканта` INT NOT NULL,
  INDEX `Исполнитель-Музыкант_fk1` (`ID Музыканта` ASC) VISIBLE,
  PRIMARY KEY (`ID Исполнителя`, `ID Музыканта`),
  CONSTRAINT `Исполнитель-Певцы_fk0`
    FOREIGN KEY (`ID Исполнителя`)
    REFERENCES `mydb`.`Исполнитель` (`ID Исполнителя`),
  CONSTRAINT `Исполнитель-Певцы_fk1`
    FOREIGN KEY (`ID Музыканта`)
    REFERENCES `mydb`.`Музыкант` (`ID Музыканта`));


-- -----------------------------------------------------
-- Table `mydb`.`Музыкант`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Музыкант` (
  `ID Музыканта` INT NOT NULL AUTO_INCREMENT,
  `Имя` VARCHAR(255) NOT NULL,
  `Возраст` INT NOT NULL,
  `Страна` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`ID Музыканта`));


-- -----------------------------------------------------
-- Table `mydb`.`Песня`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Песня` (
  `ID Песни` INT NOT NULL AUTO_INCREMENT,
  `Название` VARCHAR(255) NOT NULL,
  `Год выхода` INT NOT NULL,
  `Жанр` VARCHAR(255) NOT NULL,
  `Язык` VARCHAR(255) NOT NULL,
  `Просмотры на YouTube` BIGINT NOT NULL,
  `Количество лайков на YouTube` INT NOT NULL,
  `Количество прослушиваний на Spotify` BIGINT NOT NULL,
  `Популярность Deezer` TINYINT NOT NULL,
  `Популярность Spotify` TINYINT NOT NULL,
  `Место в топе песен` INT NULL,
  PRIMARY KEY (`ID Песни`));


-- -----------------------------------------------------
-- Table `mydb`.`Песня-Исполнитель`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Песня-Исполнитель` (
  `ID Песни` INT NOT NULL,
  `ID Исполнителя` INT NOT NULL,
  INDEX `Песня-Исполнитель_fk1` (`ID Исполнителя` ASC) VISIBLE,
  PRIMARY KEY (`ID Песни`, `ID Исполнителя`),
  CONSTRAINT `Песня-Исполнители_fk0`
    FOREIGN KEY (`ID Песни`)
    REFERENCES `mydb`.`Песня` (`ID Песни`),
  CONSTRAINT `Песня-Исполнители_fk1`
    FOREIGN KEY (`ID Исполнителя`)
    REFERENCES `mydb`.`Исполнитель` (`ID Исполнителя`));


-- -----------------------------------------------------
-- Table `mydb`.`Студия-Альбом`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Студия-Альбом` (
  `ID Студии` INT NOT NULL,
  `ID Альбома` INT NOT NULL,
  INDEX `Студия-Альбом_fk1` (`ID Альбома` ASC) VISIBLE,
  PRIMARY KEY (`ID Студии`, `ID Альбома`),
  CONSTRAINT `Студия-Альбомы_fk0`
    FOREIGN KEY (`ID Студии`)
    REFERENCES `mydb`.`Студия/лейбл` (`ID Студии/лейбла`),
  CONSTRAINT `Студия-Альбомы_fk1`
    FOREIGN KEY (`ID Альбома`)
    REFERENCES `mydb`.`Альбом` (`ID Альбома`));


-- -----------------------------------------------------
-- Table `mydb`.`Студия/лейбл`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Студия/лейбл` (
  `ID Студии/лейбла` INT NOT NULL AUTO_INCREMENT,
  `Название` VARCHAR(255) NOT NULL,
  `Год основания` INT NOT NULL,
  PRIMARY KEY (`ID Студии/лейбла`));
  
  
  -- -----------------------------------------------------
-- Table `mydb`.`Users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Users` (
  `User ID` INT NOT NULL AUTO_INCREMENT,
  `Type` INT NOT NULL,
  `Name` VARCHAR(255) NOT NULL,
  `Password` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`User ID`));
  
  

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
